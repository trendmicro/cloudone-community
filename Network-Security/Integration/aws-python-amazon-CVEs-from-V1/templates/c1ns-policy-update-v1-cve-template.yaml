AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AwsRegion:
    Type: String
    Description: Please enter the region in which the lambda will be executed
    Default : us-east-1
    AllowedValues:
      - us-east-1
      - us-east-2	
      - us-east-1	
      - us-west-1	
      - us-west-2
      - af-south-1
      - ap-east-1
      - ap-southeast-3
      - ap-south-1
      - ap-northeast-3
      - ap-northeast-2
      - ap-southeast-1
      - ap-southeast-2
      - ap-northeast-1
      - ca-central-1
      - eu-central-1
      - eu-west-1
      - eu-west-2
      - eu-south-1
      - eu-west-3
      - eu-north-1
      - me-south-1
      - me-central-1
      - sa-east-1
  ApiKey:
    Type: String
    NoEcho: "true"
    Description: Please enter your Cloud One API Key
  Token:
    Type: String
    NoEcho: "true"
    Description: Please enter your Vision One Authentication Token
  EmailSender:
    Type: String
    Description: Email address to be used for sending report
  EmailRecipients:
    Type: String
    Description: Comma separated (without spaces) email addresses for recieving report
  ActionSet:
    Type: String
    Description: Choose the recommended ActionSet you would like apply to the Intrusion Prevention Filtering
    AllowedValues:
      - Block
      - Permit
      - Trust
    Default: Block
  ProfileName:
    Type: String
    Default: Default-Profile
    Description: Profile name for Appliances 
  CronSchedule:
    Type: String
    Description: Schedule the time you would like the lambda function to run in the cron format (Default is every wednesday)
    Default: cron(0 12 ? * WED *)
  CloudOneRegion:
    Type: String
    Description: Enter your Cloud One Region
    Default: us-1
    AllowedValues:
      - trend-us-1
      - us-1
      - in-1
      - gb-1
      - jp-1
      - de-1
      - au-1
      - ca-1
      - sg-1

Mappings: 
  ActionToFlowControl:
    key:
      Block: "Block + Notify"
      Permit: "Permit + Notify"
      Trust: "Trust"

Resources:
  LambdaRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"  
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonVPCCrossAccountNetworkInterfaceOperations
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
          - !Ref LambdaSESWritePolicy
          - !Ref LambdaInvokePolicy
          - !Ref LambdaSecretAcessPolicy

  LambdaInvokePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          Resource: 
          - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:PolicyUpdateLambda
  LambdaSESWritePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - ses:CreateReceiptRule
          - ses:UpdateConfigurationSetEventDestination
          - ses:SetIdentityMailFromDomain
          - ses:DeleteReceiptFilter
          - ses:VerifyEmailIdentity
          - ses:DeleteCustomVerificationEmailTemplate
          - ses:TestRenderTemplate
          - ses:CreateReceiptFilter
          - ses:DeleteReceiptRule
          - ses:DeleteConfigurationSet
          - ses:CreateConfigurationSetTrackingOptions
          - ses:UpdateAccountSendingEnabled
          - ses:DeleteConfigurationSetEventDestination
          - ses:VerifyDomainDkim
          - ses:DeleteVerifiedEmailAddress
          - ses:VerifyDomainIdentity
          - ses:CloneReceiptRuleSet
          - ses:SetIdentityHeadersInNotificationsEnabled
          - ses:SendEmail
          - ses:SendTemplatedEmail
          - ses:SendCustomVerificationEmail
          - ses:UpdateTemplate
          - ses:DeleteConfigurationSetTrackingOptions
          - ses:UpdateConfigurationSetTrackingOptions
          - ses:SetIdentityNotificationTopic
          - ses:SetIdentityDkimEnabled
          - ses:PutConfigurationSetDeliveryOptions
          - ses:VerifyEmailAddress
          - ses:UpdateReceiptRule
          - ses:CreateConfigurationSet
          - ses:UpdateConfigurationSetReputationMetricsEnabled
          - ses:DeleteReceiptRuleSet
          - ses:CreateTemplate
          - ses:SendRawEmail
          - ses:ReorderReceiptRuleSet
          - ses:SendBounce
          - ses:UpdateConfigurationSetSendingEnabled
          - ses:SetActiveReceiptRuleSet
          - ses:CreateCustomVerificationEmailTemplate
          - ses:UpdateCustomVerificationEmailTemplate
          - ses:DeleteTemplate
          - ses:CreateReceiptRuleSet
          - ses:SetReceiptRulePosition
          - ses:CreateConfigurationSetEventDestination
          - ses:SendBulkTemplatedEmail
          - ses:DeleteIdentity
          - ses:SetIdentityFeedbackForwardingEnabled
          Resource: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${EmailRecipients}

  LambdaSecretAcessPolicy: 
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: VisualEditor0
          Effect: Allow
          Action:
          - "secretsmanager:GetSecretValue"
          - "secretsmanager:DescribeSecret"
          - "sts:AssumeRole"
          Resource: 
          - !Ref ApiKeySecret
          - !Ref TokenSecret

  #   This secret holds the Trend Micro Cloud One API key.
  ApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "TrendMicro/CloudOne/ApiKey"
      SecretString: !Sub |
        {
          "ApiKey": "${ApiKey}"
        }

  TokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "TrendMicro/VisionOne/Token"
      SecretString: !Sub |
        {
          "Token": "${Token}"
        }

  PolicyUpdateLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Environment:
        Variables:
          region: !Ref AwsRegion
          c1_api: !Ref ApiKeySecret
          v1_token: !Ref TokenSecret
          sender: !Ref EmailSender
          recipients: !Ref EmailRecipients
          cloudoneregion: !Ref CloudOneRegion
          actionset: !FindInMap [ActionToFlowControl, key, !Ref ActionSet]
          profilename: !Ref ProfileName
      Code:
        ZipFile: |
            import os
            import sys, warnings
            import csv
            from io import StringIO
            import json
            from typing import List
            from pprint import pprint
            from tempfile import TemporaryFile
            import boto3
            from botocore.exceptions import ClientError
            from email.mime.multipart import MIMEMultipart
            from email.mime.text import MIMEText
            from email.mime.application import MIMEApplication
            import urllib.parse
            from urllib.request import Request, urlopen
            from urllib.parse import urlencode
            import requests


            #### leave the following uncomment for Cloud Formation Template deployment.. followings are parameters that need to be input##
            API_VERSION = "v1"
            AWS_REGION = os.environ.get("awsregion")
            SENDER = os.environ.get("sender")
            RECIPIENTS = os.environ.get("recipients")
            C1_API_KEY = os.environ.get("c1_api")
            C1_API_HOST = (
                f"https://network.{os.environ.get('cloudoneregion')}.cloudone.trendmicro.com/api"
            )
            TREND_V1_URL_BASE = "https://api.xdr.trendmicro.com"
            ACTION_SET = os.environ.get("actionset")
            C1_PROFILE_NAME = os.environ.get("profilename")
            TREND_V1_TOKEN = os.environ.get("v1_token")

            #### Uncomment the following for local deployement ##
            # AWS_REGION = "us-east-1"
            # SENDER = "sender@email.com"
            # RECIPIENTS = "recipient@email.com","recipient@email.com"
            # C1_API_KEY = "YOUR CLOUD ONE API KEY"
            # C1_API_HOST = "https://network.us-1.cloudone.trendmicro.com/api"
            # C1_PROFILE_NAME = "Default-Profile"
            # ACTION_SET = "Block + Notify"
            # TREND_V1_URL_BASE = "https://api.xdr.trendmicro.com"
            # token = "YOUR VISION ONE AUTHENTICATION TOKEN"

            secrets = boto3.client("secretsmanager")

            v1_token_secret = secrets.get_secret_value(SecretId=TREND_V1_TOKEN)
            sm_data_v1 = json.loads(v1_token_secret["SecretString"])
            token = sm_data_v1["Token"]

            c1_api_secret = secrets.get_secret_value(SecretId=C1_API_KEY)
            sm_data_c1 = json.loads(c1_api_secret["SecretString"])
            new_api_format = sm_data_c1["ApiKey"]
            HEADERS = {
                "api-version": API_VERSION,
                #### Uncomment the following for local deployement ##
                # "Authorization": f"ApiKey {C1_API_KEY}",
                "Authorization": f"ApiKey {new_api_format}",
                "Content-Type": "application/json",
                "Accept": "application/json",
            }

            ## initialize the variables
            # Create a new SES resource and specify a region.
            ses = boto3.client("ses", region_name=AWS_REGION)


            def send_email(sender, recipients, subject, html_body, attachment_details=None):
                if not attachment_details:
                    attachment_details = []
                print("sending email ...")

                msg = MIMEMultipart()
                text_part = MIMEText(html_body, _subtype="html")
                msg.attach(text_part)

                msg["To"] = recipients
                msg["From"] = sender
                msg["Subject"] = subject

                for item in attachment_details:
                    filename = item["filename"]
                    attachment = item["attachment"]

                    part = MIMEApplication(attachment.read(), filename)
                    part.add_header("Content-Disposition", "attachment", filename=filename)
                    msg.attach(part)

                ses.send_raw_email(RawMessage={"Data": msg.as_bytes()})


            def get_all_policies(all_policies=[], next_token=None, limit=1000):
                params = {"limit": limit}
                if next_token:
                    params["cursor"] = next_token
                # use the 'headers' parameter to set the HTTP headers:
                req = Request(C1_API_HOST + "/policies/?" + urlencode(params))
                for item in HEADERS.items():
                    req.add_header(item[0], item[1])
                response = json.loads(urlopen(req).read())
                all_policies.extend(response["policies"])

                print(f'Fetched {len(all_policies)}/{response["totalCount"]}')
                next_token = response.get("next")
                if next_token:
                    get_all_policies(all_policies, next_token)
                return all_policies


            def filter_policies_with_cves(all_policies):
                policies_with_cves = []
                for policy in all_policies:
                    for ref in policy.get("signatureReferences"):
                        if ref["type"] == "cve":
                            # input(policy.keys())
                            policy_details = {
                                "id": policy["id"],
                                "name": policy["name"],
                                "severity": policy["severity"],
                                "cve": ref["value"],
                                "uuid": policy["uuid"],
                                "action_set_id": policy["policyDefaults"][0]
                                .get("recommendedActionSet", {})
                                .get("id"),
                            }
                            policies_with_cves.append(policy_details)
                print("policies with cve count = ", len(policies_with_cves))
                return policies_with_cves


            def get_response(url, headers=None, method="GET", data=None):
                if data:
                    data = json.dumps(data)
                    # Convert to String
                    data = str(data)
                    # Convert string to byte
                    data = data.encode("utf-8")
                    # Post Method is invoked if data != None
                    req = Request(url, method=method, data=data)
                    # Response
                else:
                    req = Request(url)
                if headers:
                    for item in headers.items():
                        req.add_header(item[0], item[1])
                response = json.loads(urlopen(req).read())
                return response


            def get_action_set_id_from_name(action_set_name):
                # To GET the Actionset ID
                # https://network.us-1.cloudone.trendmicro.com/api/actionsets
                params = {"allowedOnly": False}

                action_set_url = C1_API_HOST + "/actionsets" + "/?" + urlencode(params)
                response = get_response(url=action_set_url, headers=HEADERS)
                # pprint(response)
                for action_set in response["actionsets"]:
                    # print(action_set)
                    if action_set["name"] == action_set_name:
                        block_and_notify_action_set_id = action_set["id"]
                        print(
                            f"Found actionset id for '{action_set_name}': {block_and_notify_action_set_id}"
                        )
                        return block_and_notify_action_set_id
                print(f"Error: coudn't find action set matching '{action_set_name}'")


            def get_profile_id_from_name(profile_name):
                # To GET the profile Id
                # https://network.us-1.cloudone.trendmicro.com/api/profiles
                profile_url = C1_API_HOST + "/profiles"
                response = get_response(url=profile_url, headers=HEADERS)

                for profile in response["profiles"]:
                    if profile["name"] == profile_name:
                        profile_id = profile["id"]
                        print(f"Found profile id for '{profile_name}' : {profile_id}")
                        return profile_id
                print(f"Error: coudn't find profile id matching '{profile_name}'")


            def get_distribution_history():
                # To GET distribution history
                # https://network.us-1.cloudone.trendmicro.com/api/appliancedistributions?type=profile
                distribution_history_url = C1_API_HOST + "/appliancedistributions?type=profile"
                response = get_response(url=distribution_history_url, headers=HEADERS)
                print(response)


            def get_appliance_ids():
                # To GET the appliances Id
                # https://network.us-1.cloudone.trendmicro.com/api/appliances
                appliance_ids = list()
                appliance_url = C1_API_HOST + "/appliances"
                response = get_response(url=appliance_url, headers=HEADERS)
                for appliance in response["appliances"]:
                    appliance_ids.append(appliance["ID"])
                return appliance_ids


            def update_policy(profile_id, action_set_id, policy_signature_uuid):
                # To POST the Overrides to the filter/Policy:
                # https://network.us-1.cloudone.trendmicro.com/api/profiles/1/policyoverrides
                policy_override_api = f"{C1_API_HOST}/profiles/{profile_id}/policyoverrides"
                body = {
                    "signatureUuids": [policy_signature_uuid],
                    "actionSetId": int(action_set_id),
                    "toEnable": True,
                }
                response = get_response(
                    url=policy_override_api, headers=HEADERS, data=body, method="PUT"
                )
                return response


            def distribute_policy(appliance_id, profile_id):
                # To POST / distribute the policy to the appliances:
                # https://network.us-1.cloudone.trendmicro.com/api/appliancedistributions
                distribute_policy_api = C1_API_HOST + "/appliancedistributions"
                body = {
                    "applianceId": appliance_id,
                    "type": "profile",
                    "profile": {"id": profile_id},
                }
                response = get_response(url=distribute_policy_api, headers=HEADERS, data=body)
                return response


            def get_cves_from_v1():
                url_path = "/beta/xdr/riskInsights/devices"
                query_params = {"top": 100}
                headers = {
                    "Authorization": "Bearer " + token,
                    # 'TMV1-Filter': 'YOUR_FILTER (string)'
                    # string
                    # Example: deviceName eq 'SASE-PC1'
                    # Filter for retrieving a subset of the prioritized CVEs. Supported fields and operators:
                    # 'id' - Unique alphanumeric string that identifies a device on the Trend Vision One platform.
                    # 'deviceName' - Device name of a device.
                    # 'ip' - IP addresses of a device.
                    # 'cvssScore' - CVSS score.
                    # 'globalExploitActivityLevel' - Parameter that indicates how often attackers are exploiting a vulnerability. Supported values: "High", "Medium,High".
                    # 'cveId' - Common Vulnerabilities and Exposures identifier. Also known as CVE ID
                    # 'eq' - Abbreviation of the operator 'equal to'.
                    # 'gt' - Abbreviation of the operator 'greater than'.
                    # 'ge' - Abbreviation of the operator 'greater than or equal'.
                    # 'le' - Abbreviation of the operator 'less than or equal'.
                    # 'lt' - Abbreviation of the operator 'less than'.
                    # 'and' - Operator 'and'.
                    # 'or' - Operator 'or'.
                    # 'not' - Operator 'not'.
                    # '( )' - Symbols for grouping operands with their correct operator.
                }

                r = requests.get(TREND_V1_URL_BASE + url_path, params=query_params, headers=headers)

                print(r.status_code)
                if "application/json" in r.headers.get("Content-Type", "") and len(r.content):
                    device_cves = {}
                    response = r.json()
                    for item in response["items"]:
                        device_cves[item["deviceName"]] = [
                            cve_info["id"] for cve_info in item["cveRecords"]
                        ]
                    return device_cves
                else:
                    print(r.text)


            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))

                table_rows_updated_filters = list()
                failed_table_rows_updated_filters = list()
                table_rows_policies_already_matched = list()

                # get the action set id
                action_set_id = get_action_set_id_from_name(ACTION_SET)
                # get the profile id
                profile_id = get_profile_id_from_name(C1_PROFILE_NAME)

                policies = filter_policies_with_cves(get_all_policies())

                cves = []
                device_cves = get_cves_from_v1()
                for device_name in device_cves:
                    cves_from_device = device_cves[device_name]
                    print(f"Found {len(cves_from_device)} CVEs for device '{device_name}'")
                    cves.extend(cves_from_device)

                cves = list(set(cves))

                policies_to_update = list()

                for cve in cves:
                    for policy in policies:
                        if policy["cve"] == cve:
                            print(f"foung policy for {cve} - {policy}")
                            if policy["action_set_id"] == action_set_id:
                                print(
                                    ">>>>>>>>>>>>>>>>>> skipping policy update as action set id already mathces required action set"
                                )
                                table_rows_policies_already_matched.append(
                                    [ACTION_SET, cve, policy["name"]]
                                )
                            else:
                                policies_to_update.append([cve, policy])

                print(f"Number of policies to update: {len(policies_to_update)}")

                updated_policies = []
                for cve, policy in policies_to_update:
                    if policy["uuid"] not in updated_policies:
                        try:
                            print(
                                update_policy(
                                    profile_id=profile_id,
                                    action_set_id=action_set_id,
                                    policy_signature_uuid=str(policy["uuid"]),
                                )
                            )
                            updated_policies.append(policy["uuid"])
                            table_rows_updated_filters.append([ACTION_SET, cve, policy["name"]])
                        except Exception as e:
                            print(e)
                            failed_table_rows_updated_filters.append([policy["name"], e])

                # print('test policy update')
                # print(update_policy(profile_id, action_set_id, '00000001-0001-0001-0001-000000041752'))

                # get_distribution_history()
                appliance_ids = get_appliance_ids()
                # print(appliance_ids)
                for appliance in appliance_ids:
                    try:
                        distribute_policy(appliance_id=appliance, profile_id=profile_id)
                    except Exception as e:
                        print(e)

                # The subject line for the email.
                subject = "Vision One Network Security Policy Updated"

                # check if any intrusion prevention filters were updated or not and send email
                no_filters_to_update_html_body = "<p>No Intrusion Prevention Filters to update</p>"

                updated_filters_html_body = ""
                failed_updated_filters_html_body = ""
                skipped_updated_filters_html_body = ""

                if table_rows_updated_filters:
                    updated_filters_html = '<table border="1">' + "\n"
                    # write headers
                    updated_filters_html += "</tr>" + "\n"
                    for col in ["action id", "CVE", "Intrusion Prevention Filtering"]:
                        updated_filters_html += f"<th>{col}</th>" + "\n"
                    updated_filters_html += "</tr>" + "\n"
                    # write rows
                    for row in table_rows_updated_filters:
                        updated_filters_html += "<tr>" + "\n"
                        for col in row:
                            updated_filters_html += f"<td>{col}</td>" + "\n"
                        updated_filters_html += "</tr>" + "\n"
                    updated_filters_html += "</table>"
                    updated_filters_html_body = f"""<h1>Updated Intrusion Prevention Filters</h1>
                    {updated_filters_html}
                    """
                    no_filters_to_update_html_body = ""

                if failed_table_rows_updated_filters:
                    failed_updated_filters_html = '<table border="1">' + "\n"
                    # write headers
                    failed_updated_filters_html += "</tr>" + "\n"
                    for col in ["Intrusion Prevention Filtering", "Reason"]:
                        failed_updated_filters_html += f"<th>{col}</th>" + "\n"
                    failed_updated_filters_html += "</tr>" + "\n"
                    # write rows
                    for row in failed_table_rows_updated_filters:
                        failed_updated_filters_html += "<tr>" + "\n"
                        for col in row:
                            failed_updated_filters_html += f"<td>{col}</td>" + "\n"
                        failed_updated_filters_html += "</tr>" + "\n"
                    failed_updated_filters_html += "</table>"
                    failed_updated_filters_html_body = f"""Failures in updating Intrusion Prevention Filters</h1>
                    {failed_updated_filters_html}
                    """
                    no_filters_to_update_html_body = ""

                if table_rows_policies_already_matched:
                    skipped_updated_filters_html = '<table border="1">' + "\n"
                    # write headers
                    skipped_updated_filters_html += "</tr>" + "\n"
                    for col in ["action id", "CVE", "Intrusion Prevention Filtering"]:
                        skipped_updated_filters_html += f"<th>{col}</th>" + "\n"
                    skipped_updated_filters_html += "</tr>" + "\n"
                    # write rows
                    for row in table_rows_policies_already_matched:
                        skipped_updated_filters_html += "<tr>" + "\n"
                        for col in row:
                            skipped_updated_filters_html += f"<td>{col}</td>" + "\n"
                        skipped_updated_filters_html += "</tr>" + "\n"
                    skipped_updated_filters_html += "</table>"
                    skipped_updated_filters_html_body = f"""<h1>Already Updated Intrusion Prevention Filters</h1>
                    {skipped_updated_filters_html}
                    """
                    no_filters_to_update_html_body = ""

                html_body = (
                    updated_filters_html_body
                    + failed_updated_filters_html_body
                    + skipped_updated_filters_html_body
                    + no_filters_to_update_html_body
                )

                # The HTML body of the email.
                body_html = f"""<html>
                <head></head>
                <body>
                    {html_body}
                </body>
                </html>
                """

                send_email(
                    SENDER,
                    RECIPIENTS,
                    subject,
                    body_html,
                )
      FunctionName: "PolicyUpdateLambda"
      Handler: "index.lambda_handler"
      Runtime: python3.7
      Timeout: 600
      MemorySize: 512
      Role: !GetAtt LambdaRole.Arn

  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: !Sub ${CronSchedule} 
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "PolicyUpdateLambda"
              - "Arn"
          Id: "TargetFunctionV1"
  
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "PolicyUpdateLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
