description: |+
  # Trend Cloud One Workload Security - Agent Diagnostic Collection Tool

  This tool is intended to aid in generating and collecting the workload security agent diagnostic log package.
  The output of this tool can be provided to Trend Micro Support on case creation.

  ---

  ## Requirements for use.

  ### SSM Automation Operations IAM Role
  - Create an IAM Role for SSM Automations to Assume to execute document. See example [SSM-Policy](https://github.com/JustinDPerkins/TrendCloudOne-SupportCollection/blob/main/Workload-Security/aws/ssm-iam-example-policy.json)
  - The IAM Role requires SSM to be a Trusted Entity.

  ### Instance Requirements:
  - Requires Workload Security Agent to be deployed on instance.
  - Requires SSM Agent to be Installed and Running. See [here](https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-agent.html)
  - The EC2 Instance requires an IAM Role with SSMManagedCore permissions.
  - The EC2 will need an IAM Role with S3:PutObject permissions to upload diagnostic package to S3.
  - The Instance will require the AWS CLI to be installed. See [here](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)

  ---

  ### Limitations:
  - Same Account/Region

  ---

  ### What is supported?
  - Linux OS
  - Windows OS

  ---
  ## How Can this tool be used?

  ### Via AWS Console?
  Systems Manager > Documents > All Documents > "Trend-WorkloadSecurity-SupportCollectionTool"
  - Provide the ARN value of the SSM Automation Operation IAM Role will assume.(SSM Trusted Entity)
  - Provide a single or comma seperated list of Instance ID. (i-1234567890,...,...)
  - Provide the Name of the S3 bucket to upload the diagnostic package to.(EC2 will need permissions to this bucket to put objects)

  ### Via AWS CLI:
  - Linux CLI:

  ```
  aws ssm start-automation-execution --document-name "Trend-WorkloadSecurity-SupportCollectionTool" --document-version "\$DEFAULT" --parameters '{"AutomationAssumeRole":["<SSM IAM Automation Role ARN Here>"],"InstanceIds":["<Instance-ID-Here>"],"S3BucketName":["<Bucket-4-Artifact-Name-Here>"]}' --region us-east-1
  111
  ```


schemaVersion: '0.3'
assumeRole: '{{ AutomationAssumeRole }}'
parameters:
  AutomationAssumeRole:
    type: String
    description: (Required) The ARN of the role that allows Automation to perform the actions on your behalf
  InstanceIds:
    type: StringList
    description: EC2 instance ID. Comma Seperated ID's if multiple
  S3BucketName:
    type: String
    description: S3 bucket name to upload the diagnostic package
mainSteps:
  - name: GetSSMInstanceInformation
    action: 'aws:executeAwsApi'
    inputs:
      Service: ssm
      Api: DescribeInstanceInformation
      Filters:
        - Key: InstanceIds
          Values:
            - '{{ InstanceIds }}'
    outputs:
      - Name: instances
        Selector: $.InstanceInformationList
        Type: MapList
  - name: CompileInstanceList
    action: 'aws:executeScript'
    inputs:
      Runtime: python3.7
      Handler: script_handler
      InputPayload:
        instances: '{{ GetSSMInstanceInformation.instances }}'
      Script: |-
        def script_handler(events, context):
          window_instances = []
          linux_instances = []

          for instance in events['instances']:
            if instance['PlatformType'] == 'Windows':
              window_instances.append(instance['InstanceId'])
            elif instance['PlatformType'] == 'Linux':
              linux_instances.append(instance['InstanceId'])
            else:
              raise ValueError('Unsupported platform {}'.format(instance['PlatformType']))
            
          return {
            'windows_instances': window_instances,
            'linux_instances': linux_instances,
            'contains_windows_instances': any(window_instances),
            'contains_linux_instances': any(linux_instances)
          }
    outputs:
      - Name: windows_instances
        Selector: $.Payload.windows_instances
        Type: StringList
      - Name: linux_instances
        Selector: $.Payload.linux_instances
        Type: StringList
      - Name: contains_windows_instances
        Selector: $.Payload.contains_windows_instances
        Type: Boolean
      - Name: contains_linux_instances
        Selector: $.Payload.contains_linux_instances
        Type: Boolean
  - name: BranchExecuteWindowsDiagnosticPackage
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: ExecuteDiagnosticPackageWindows
          Variable: '{{ CompileInstanceList.contains_windows_instances }}'
          BooleanEquals: true
      Default: BranchExecuteLinuxDiagnosticPackage
  - name: ExecuteDiagnosticPackageWindows
    action: 'aws:runCommand'
    onFailure: Continue
    inputs:
      InstanceIds: '{{ CompileInstanceList.windows_instances }}'
      DocumentName: AWS-RunPowerShellScript
      Parameters:
        commands:
          - |
            $id = Invoke-RestMethod -Uri "http://169.254.169.254/latest/meta-data/instance-id"
            # Run the Deep Security diagnostic package command
            cd  "C:\Program Files\Trend Micro\Deep Security Agent\" 
            $output = .\dsa_control -d

            # Extract the path and file name from the output
            $fileName = $output | Select-String -Pattern "file name = (.+)$" | ForEach-Object{$_.Matches.Groups[1].Value }

            # Wait for 90 seconds for diag creation
            Start-Sleep -Seconds 90
            #set diag path
            $path = "C:\ProgramData\Trend Micro\Deep Security Agent\diag"
            # Change directory to the diagnostic package path
            Set-Location -Path $path

            # Import the AWS module if it's not already imported
            if (-not (Get-Module -ListAvailable -Name AWSPowerShell)) {
                Import-Module AWSPowerShell
            }

            # Set the S3 bucket and file paths
            $bucketName = "{{ S3BucketName }}"
            $s3Key = "ws-support-tool/{{automation:EXECUTION_ID}}/"+$id+"_windows_agent_diag.zip"

            # Upload the file to S3
            Write-S3Object -BucketName $bucketName -Key $s3Key -File $fileName
  - name: BranchExecuteLinuxDiagnosticPackage
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: ExecuteDiagnosticPackageLinux
          Variable: '{{ CompileInstanceList.contains_linux_instances }}'
          BooleanEquals: true
    isEnd: true
  - name: ExecuteDiagnosticPackageLinux
    action: 'aws:runCommand'
    inputs:
      InstanceIds: '{{ CompileInstanceList.linux_instances }}'
      DocumentName: AWS-RunShellScript
      Parameters:
        commands:
          - |
            sudo su
            id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            output=$(sudo /opt/ds_agent/dsa_control -d)
            path=$(echo "$output" | awk -F 'path =' '{print $2}' | awk '{$1=$1;print}')
            file_name=$(echo "$output" | awk -F 'file name =' '{print $2}' | awk '{$1=$1;print}' | tr -d '[:space:]')
            full_path="${path}/${file_name}"
            echo $full_path
            sleep 90
            cd /var/opt/ds_agent/diag/
            aws s3 cp "$file_name" s3://{{ S3BucketName }}/ws-support-tool/{{automation:EXECUTION_ID}}/${id}_linux_agent_diag.zip
    outputs:
      - Name: Path
        Selector: $.Payload.path
        Type: String
      - Name: File
        Selector: $.Payload.file
        Type: String
