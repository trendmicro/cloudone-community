{
    "schemaVersion":"1.2",
    "description":"Installation and Activation of the Trend Micro Deep Security Agent using AWS SSM - Run Command",
    "parameters":{

        "DSHostname":{
            "type":"String",
            "default":"app.deepsecurity.trendmicro.com",
            "description":"Enter the Deep Security Manager's publicly accessible DNS name or IP address. For DSaaS, enter app.deepsecurity.trendmicro.com.",
            "maxChars":4096
        },
        "DSHostnameActivation":{
            "type":"String",
            "default":"agents.deepsecurity.trendmicro.com",
            "description":"Enter the Deep Security Manager's publicly accessible DNS name or IP address. For DSaaS, enter agents.deepsecurity.trendmicro.com.",
            "maxChars":4096
        },
        "DSPort":{
            "type":"String",
            "default":"443",
            "description":"Enter the port number of the Deep Security Manager. If using the installed software package, enter 4120 or the port accessible externally. Port 443 is used as default if no value is provided. Please enter 443 if using Deep Security as a service",
            "maxChars":4096
        },

        "TenantUser":{
            "type":"String",
            "default":"",
            "description":"Enter your Tenant ID, which is a hyphenated, 36-character string available in the Deployment Scripts dialog box in the Deep Security console. This parameter is mandatory if using Deep Security as a Service, or a multi-tenant installation of Deep Security Manager. Enter "NA" if using a non-multi-tenant Manager.",
            "maxChars":4096
        },
        "TenantPass":{
            "type":"String",
            "default":"",
            "description":"Enter the tenant activation password, which is a hyphenated, 36-character string available in the Deployment Scripts dialog box in the Deep Security console. This parameter is mandatory if using Deep Security as a Service, or a multi-tenant installation of Deep Security Manager. Enter "NA" if using a non-multi-tenant Manager.",
            "maxChars":4096
        },
        "DSPolicy":{
            "type":"String",
            "default":"",
            "description":"Enter the Policy ID for assigning a policy (optional). Policy ID can be obtained with a RESTfull request to the listPolicies call or by examining the XML file of exported policies.",
            "maxChars":4096
        },
        "workingDirectory":{
            "type":"String",
            "default":"",
            "description":"(Optional) The path to the working directory on your instance.",
            "maxChars":4096
        },
        "executionTimeout":{
            "type":"String",
            "default":"3600",
            "description":"(Optional) The time in seconds for a command to complete before it is considered to have failed. Default is 3600 (1 hour). Maximum is 28800 (8 hours).",
            "allowedPattern":"([1-9][0-9]{0,3})|(1[0-9]{1,4})|(2[0-7][0-9]{1,3})|(28[0-7][0-9]{1,2})|(28800)"
        }
    },
    "runtimeConfig":{
        "aws:runShellScript":{
            "properties":[
                {
                    "id":"0.aws:runShellScript",
                    "runCommand":[

                        "#!/usr/bin/env bash ",
                        "if [[ $(/usr/bin/id -u) -ne 0 ]]; then",
                        "logger -t You are not running as the root user.  Please try again with root privileges.;",
                        "exit 1;",
                        "fi;",
                        "if type curl >/dev/null 2>&1; then",
                        "SOURCEURL='https://app.deepsecurity.trendmicro.com:443' ",
                        "CURLOUT=$(eval curl $SOURCEURL/software/deploymentscript/platform/linux-secure/ -o /tmp/DownloadInstallAgentPackage --silent --tlsv1.2;)",
                        "err=$?",
                        "if [[ $err -eq 60 ]]; then",
                        "echo \"SSL certificate validation for the agent package download has failed. Please check that your Deep Security Manager SSL certificate is signed by a trusted root certificate authority. For more information, search for \"deployment scripts\" in the Deep Security Help Center.\" ",
                        "logger -t SSL certificate validation for the agent package download has failed. Please check that your Deep Security Manager SSL certificate is signed by a trusted root certificate authority. For more information, search for \"deployment scripts\" in the Deep Security Help Center. ",
                        "exit 2;",
                        "fi",
                        "if [ -s /tmp/DownloadInstallAgentPackage ]; then",
                        "if echo 'E7775395D5FFF56CCD7D2F171ECFE2F8A704DC109C9215B7E29BC09CCC92045C  /tmp/DownloadInstallAgentPackage' | sha256sum -c; then",
                        ". /tmp/DownloadInstallAgentPackage ",
                        "Download_Install_Agent ",
                        "else ",
                        "echo \"Failed to validate the agent installation script.\" ",
                        "logger -t Failed to validate the agent installation script ",
                        "false",
                        "fi",
                        "else",
                        "echo \"Failed to download the agent installation script.\" ",
                        "logger -t Failed to download the Deep Security Agent installation script",
                        "false",
                        "fi",
                        "else",
                        "echo \" Please install CURL before running this script.\" ",
                        "logger -t Please install CURL before running this script",
                        "false",
                        "fi",
                        "sleep 15",
                        "/opt/ds_agent/dsa_control -r ",
                        "sudo /opt/ds_agent/dsa_control -a dsm://{{ DSHostnameActivation }}:{{ DSPort }}/ 'tenantID:{{ TenantUser }}' 'token:{{ TenantPass }}' 'policyid:{{ DSPolicy }}' "

                    ],
                    "workingDirectory":"{{ workingDirectory }}",
                    "timeoutSeconds":"{{ executionTimeout }}"
                }
            ]
        }
    }
}
