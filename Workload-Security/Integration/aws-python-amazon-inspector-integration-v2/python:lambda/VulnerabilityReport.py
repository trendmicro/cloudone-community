from __future__ import print_function
import os
import json
import csv
import sys, warnings
import boto3
from pprint import pprint
from tempfile import TemporaryFile
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from urllib.request import Request, urlopen
from urllib.parse import urlencode


# API_VERSION = "v1"
# TOPIC_ARN = os.environ.get('topic_arn')
# AWS_REGION = os.environ.get("aws_region")
# BUCKET_NAME = os.environ.get("bucket_name")
# FILE_NAME = os.environ.get("csv_filename")
# C1_API_KEY = os.environ.get("c1_api_key")
# HOST = (
#     f"https://workload.{os.environ.get('cloudoneregion')}.cloudone.trendmicro.com/api"
# )

# get secret
# secrets = boto3.client("secretsmanager").get_secret_value(SecretId=C1_API_KEY)
# sm_data = json.loads(secrets["SecretString"])
# api_key = sm_data["ApiKey"]


######################################## Uncomment the following if you running on your local machine and comment the above 7 lines
API_VERSION = "v1"
AWS_REGION = "us-east-1"  ##You can input the aws region you want here
BUCKET_NAME = "vulnerabilitytestbucket"
FILE_NAME = "vulnerability_report.csv"
TOPIC_ARN = "arn:aws:sns:us-east-1:728213996812:test"
HOST = "https://workload.trend-us-1.cloudone.trendmicro.com/api"
api_key = "YOUR CLOUD ONE API KEY"
############################################## END OF TEST CODE ############################################################

HEADERS = {
    "Authorization": f"ApiKey {api_key}",
    "api-version": API_VERSION,
    "Content-Type": "application/json",
}

inspector = boto3.client("inspector2", AWS_REGION)
sts = boto3.client("sts")
sns = boto3.client("sns")
s3 = boto3.client("s3")


def send_email(sender, recipients, subject, html_body, attachment_details):
    print("sending email ...")
    # Create a new SES resource and specify a region.
    client = boto3.client("ses", region_name=AWS_REGION)
    msg = MIMEMultipart()
    text_part = MIMEText(html_body, _subtype="html")
    msg.attach(text_part)

    msg["To"] = recipients
    msg["From"] = sender
    msg["Subject"] = subject
    for item in attachment_details:
        filename = item["filename"]
        attachment = item["attachment"]
        part = MIMEApplication(attachment.read(), filename)
        part.add_header("Content-Disposition", "attachment", filename=filename)
        msg.attach(part)
    client.send_raw_email(RawMessage={"Data": msg.as_bytes()})



def get_response(url, query_parameters=None, headers=None, method="GET", data=None):
    if query_parameters:
        url += f"?{urlencode(query_parameters)}"
        print("formed url:", url)
    if data:
        data = json.dumps(data)
        # Convert to String
        data = str(data)
        # Convert string to byte
        data = data.encode("utf-8")
        # Post/Put Method is being invoked if data != None
        req = Request(url, method=method, data=data)
    else:
        req = Request(url)
    if headers:
        for item in headers.items():
            req.add_header(item[0], item[1])
    # Response
    response = json.loads(urlopen(req).read())
    return response


def cves_from_instance(instance_id, inspector):
    cves = list()
    result = list()
    print("<<<<<<< checking instance id:", instance_id)
    resp = inspector.list_findings(
        filterCriteria={
            "findingStatus": [{"comparison": "EQUALS", "value": "ACTIVE"}],
            "resourceId": [{"comparison": "EQUALS", "value": instance_id}],
        }
    )
    result.extend(resp["findings"])
    next_token = resp.get("nextToken")
    while next_token:
        resp = inspector.list_findings(
            filterCriteria={
                "findingStatus": [{"comparison": "EQUALS", "value": "ACTIVE"}],
                "resourceId": [{"comparison": "EQUALS", "value": instance_id}],
            },
            nextToken=next_token,
        )
        result.extend(resp["findings"])
        next_token = resp.get("nextToken")
    for finding in result:
        cve = finding.get("packageVulnerabilityDetails", {}).get("vulnerabilityId")
        if cve:
            cves.append(cve)
        # print(cve)
    return cves


def all_instances_details_from_inspector(inspector):
    instances = list()
    result = list()
    findings = inspector.list_finding_aggregations(
        aggregationType="AWS_EC2_INSTANCE",
    )
    result.extend(findings["responses"])
    next_token = findings.get("nextToken")
    while next_token:
        findings = inspector.list_finding_aggregations(
            aggregationType="AWS_EC2_INSTANCE",
            nextToken=next_token,
        )
        result.extend(findings["responses"])
        next_token = findings.get("nextToken")
    for finding in result:
        instance_details = {
            "id": finding["ec2InstanceAggregation"]["instanceId"],
            "name": finding["ec2InstanceAggregation"]
            .get("instanceTags", {})
            .get("Name"),
            "account_id": finding["ec2InstanceAggregation"]["accountId"],
        }
        instances.append(instance_details)
    print("Found total instances =", len(instances))
    return instances


def get_computer_from_instance_id(instance_id):
    search_criteria = {
        "fieldName": "ec2VirtualMachineSummary/instanceID",
        "stringTest": "equal",
        "stringValue": instance_id,
    }
    payload = {
        "searchCriteria": [search_criteria],
    }
    query_parameters = {"expand": "all"}
    computers_api = f"{HOST}/computers/search"
    response = get_response(
        url=computers_api,
        query_parameters=query_parameters,
        headers=HEADERS,
        method="POST",
        data=payload,
    )
    computers = response["computers"]
    if computers:
        return computers[0]


def lambda_handler(event, context):
    csv_rows = list()
    all_instance_details = all_instances_details_from_inspector(inspector)
    for instance_details in all_instance_details:
        instance_id = instance_details["id"]
        instance_name = instance_details["name"]
        account_id = instance_details["account_id"]
        print(instance_name, instance_id)
        this_instance_cves = cves_from_instance(instance_id, inspector)
        print("inspector cves", len(this_instance_cves))

        computer = get_computer_from_instance_id(instance_id)
        if not computer:
            print(f"No computer found for instance id: {instance_id}")
            continue
        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   id", computer["ID"])
        if computer.get("intrusionPrevention", {}).get("ruleIDs"):
            cves_protected_by_rules = []
            for ipr_id in computer["intrusionPrevention"]["ruleIDs"]:
                print(">>>>>>>>> checking rule id:", ipr_id)
                describe_ips_url = f"{HOST}/computers/{computer['ID']}/intrusionprevention/rules/{ipr_id}"
                ipr = get_response(url=describe_ips_url, headers=HEADERS)

                if ipr.get("CVE"):
                    for cve in ipr["CVE"]:
                        if cve in this_instance_cves:
                            print(
                                account_id,
                                instance_id,
                                computer["displayName"],
                                ipr["identifier"],
                                ipr["name"],
                                cve,
                                ipr["severity"],
                                ipr["CVSSScore"],
                            )
                            csv_rows.append(
                                [
                                    account_id,
                                    instance_id,
                                    computer["displayName"],
                                    ipr["identifier"],
                                    ipr["name"],
                                    cve,
                                    ipr["severity"],
                                    ipr["CVSSScore"],
                                ]
                            )
                            cves_protected_by_rules.append(cve)
            unprotected_cves = list(
                set(this_instance_cves) - set(cves_protected_by_rules)
            )
            for cve in unprotected_cves:
                csv_rows.append(
                    [
                        account_id,
                        instance_id,
                        computer["displayName"],
                        "None",
                        "None",
                        cve,
                        "None",
                        "None",
                    ]
                )
        else:
            for cve in this_instance_cves:
                csv_rows.append(
                    [
                        account_id,
                        instance_id,
                        computer["displayName"],
                        "None",
                        "None",
                        cve,
                        "None",
                        "None",
                    ]
                )

    csv_header_protected_instances = [
        "account_id",
        "instance_id",
        "computer",
        "ipr_identifier",
        "ipr_name",
        "cve",
        "severity",
        "cvss_score",
    ]


    csv_file = TemporaryFile(mode="w+", newline="")
    writer = csv.writer(csv_file)

    writer.writerow(csv_header_protected_instances)
    for row in csv_rows:
        writer.writerow(row)
    csv_file.seek(0)


    # The subject line for the email.
    subject = f"Vulnerability Report (CVEs) from Intrusion Prevention - {get_account_id()}, {AWS_REGION}"
    protected_instances_html = '<table border="1">' + "\n"
    # write headers
    protected_instances_html += "</tr>" + "\n"
    for col in csv_header_protected_instances:
        protected_instances_html += f"<th>{col}</th>" + "\n"
    protected_instances_html += "</tr>" + "\n"
    # write rows
    for row in csv_rows:
        protected_instances_html += "<tr>" + "\n"
        for col in row:
            protected_instances_html += f"<td>{col}</td>" + "\n"
        protected_instances_html += "</tr>" + "\n"
    protected_instances_html += "</table>"
    csv_rows_unprotected_instances = list()
    all_instance_details = all_instances_details_from_inspector(inspector)
    for instance_details in all_instance_details:
        id = instance_details["id"]
        name = instance_details["name"]
        cves = cves_from_instance(id, inspector)
        if cves:
            for cve in cves:
                csv_rows_unprotected_instances.append([id, name, cve])
    tmp_csv_file_unprotected_instances = TemporaryFile(mode="w+", newline="")
    writer = csv.writer(tmp_csv_file_unprotected_instances)
    csv_header_unprotected_instances = ["instance_id", "name", "cve"]
    writer.writerow(csv_header_unprotected_instances)
    for row in csv_rows_unprotected_instances:
        writer.writerow(row)
    tmp_csv_file_unprotected_instances.seek(0)
    unprotected_instances_html = '<table border="1">' + "\n"
    # write headers
    unprotected_instances_html += "</tr>" + "\n"
    for col in csv_header_unprotected_instances:
        unprotected_instances_html += f"<th>{col}</th>" + "\n"
    unprotected_instances_html += "</tr>" + "\n"
    # write rows
    for row in csv_rows_unprotected_instances:
        unprotected_instances_html += "<tr>" + "\n"
        for col in row:
            unprotected_instances_html += f"<td>{col}</td>" + "\n"
        unprotected_instances_html += "</tr>" + "\n"
    unprotected_instances_html += "</table>"
    # The HTML body of the email.
    body_html = f"""<html>
    <head></head>
    <body>
        <h1>Protected Instances</h1>
        {protected_instances_html}
        <h1>Unprotected Instances</h1>
        {unprotected_instances_html}
    </body>
    </html>
    """
    send_email(
        SENDER,
        RECIPIENTS,
        subject,
        body_html,
        [
            {"filename": "protected_instances.csv", "attachment": csv_file},
            {
                "filename": "unprotected_instances.csv",
                "attachment": tmp_csv_file_unprotected_instances,
            },
        ],
    )


######################################## Uncomment the following if you running on your local machine
# lambda_handler(None, None)
