from __future__ import print_function
import os
import json
import csv
import sys, warnings
import boto3
from pprint import pprint
from tempfile import TemporaryFile
from urllib.request import Request, urlopen
from urllib.parse import urlencode


# API_VERSION = "v1"
# TOPIC_ARN = os.environ.get('topic_arn')
# AWS_REGION = os.environ.get("aws_region")
# BUCKET_NAME = os.environ.get("bucket_name")
# FILE_NAME = os.environ.get("csv_filename")
# C1_API_KEY = os.environ.get("c1_api_key")
# HOST = (
#     f"https://workload.{os.environ.get('cloudoneregion')}.cloudone.trendmicro.com/api"
# )

# get secret
# secrets = boto3.client("secretsmanager").get_secret_value(SecretId=C1_API_KEY)
# sm_data = json.loads(secrets["SecretString"])
# api_key = sm_data["ApiKey"]


######################################## Uncomment the following if you running on your local machine and comment the above 7 lines
API_VERSION = "v1"
AWS_REGION = "us-east-1"  ##You can input the aws region you want here
BUCKET_NAME = "vulnerabilitytestbucket"
FILE_NAME = "vulnerability_report.csv"
TOPIC_ARN = "arn:aws:sns:us-east-1:728213996812:test"
HOST = "https://workload.trend-us-1.cloudone.trendmicro.com/api"
api_key = "YOUR CLOUD ONE API KEY"
############################################## END OF TEST CODE ############################################################

HEADERS = {
    "Authorization": f"ApiKey {api_key}",
    "api-version": API_VERSION,
    "Content-Type": "application/json",
}

inspector = boto3.client("inspector2", AWS_REGION)
sts = boto3.client("sts")
sns = boto3.client("sns")
s3 = boto3.client("s3")


def send_sns(topic_arn, subject, message):
    response = sns.publish(
        TargetArn=topic_arn,
        Subject=subject,
        Message=message,
        #   MessageStructure = 'json'
    )

    return response


def get_response(url, query_parameters=None, headers=None, method="GET", data=None):
    if query_parameters:
        url += f"?{urlencode(query_parameters)}"
        print("formed url:", url)
    if data:
        data = json.dumps(data)
        # Convert to String
        data = str(data)
        # Convert string to byte
        data = data.encode("utf-8")
        # Post/Put Method is being invoked if data != None
        req = Request(url, method=method, data=data)
    else:
        req = Request(url)
    if headers:
        for item in headers.items():
            req.add_header(item[0], item[1])
    # Response
    response = json.loads(urlopen(req).read())
    return response


def cves_from_instance(instance_id, inspector):
    cves = list()
    result = list()
    print("<<<<<<< checking instance id:", instance_id)
    resp = inspector.list_findings(
        filterCriteria={
            "findingStatus": [{"comparison": "EQUALS", "value": "ACTIVE"}],
            "resourceId": [{"comparison": "EQUALS", "value": instance_id}],
        }
    )
    result.extend(resp["findings"])
    next_token = resp.get("nextToken")
    while next_token:
        resp = inspector.list_findings(
            filterCriteria={
                "findingStatus": [{"comparison": "EQUALS", "value": "ACTIVE"}],
                "resourceId": [{"comparison": "EQUALS", "value": instance_id}],
            },
            nextToken=next_token,
        )
        result.extend(resp["findings"])
        next_token = resp.get("nextToken")
    for finding in result:
        cve = finding.get("packageVulnerabilityDetails", {}).get("vulnerabilityId")
        if cve:
            cves.append(cve)
        # print(cve)
    return cves


def all_instances_details_from_inspector(inspector):
    instances = list()
    result = list()
    findings = inspector.list_finding_aggregations(
        aggregationType="AWS_EC2_INSTANCE",
    )
    result.extend(findings["responses"])
    next_token = findings.get("nextToken")
    while next_token:
        findings = inspector.list_finding_aggregations(
            aggregationType="AWS_EC2_INSTANCE",
            nextToken=next_token,
        )
        result.extend(findings["responses"])
        next_token = findings.get("nextToken")
    for finding in result:
        instance_details = {
            "id": finding["ec2InstanceAggregation"]["instanceId"],
            "name": finding["ec2InstanceAggregation"]
            .get("instanceTags", {})
            .get("Name"),
            "account_id": finding["ec2InstanceAggregation"]["accountId"],
        }
        instances.append(instance_details)
    print("Found total instances =", len(instances))
    return instances


def get_computer_from_instance_id(instance_id):
    search_criteria = {
        "fieldName": "ec2VirtualMachineSummary/instanceID",
        "stringTest": "equal",
        "stringValue": instance_id,
    }
    payload = {
        "searchCriteria": [search_criteria],
    }
    query_parameters = {"expand": "all"}
    computers_api = f"{HOST}/computers/search"
    response = get_response(
        url=computers_api,
        query_parameters=query_parameters,
        headers=HEADERS,
        method="POST",
        data=payload,
    )
    computers = response["computers"]
    if computers:
        return computers[0]


def lambda_handler(event, context):
    csv_rows = list()
    all_instance_details = all_instances_details_from_inspector(inspector)
    for instance_details in all_instance_details:
        instance_id = instance_details["id"]
        instance_name = instance_details["name"]
        account_id = instance_details["account_id"]
        print(instance_name, instance_id)
        this_instance_cves = cves_from_instance(instance_id, inspector)
        print("inspector cves", len(this_instance_cves))

        computer = get_computer_from_instance_id(instance_id)
        if not computer:
            print(f"No computer found for instance id: {instance_id}")
            continue
        print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   id", computer["ID"])
        if computer.get("intrusionPrevention", {}).get("ruleIDs"):
            cves_protected_by_rules = []
            for ipr_id in computer["intrusionPrevention"]["ruleIDs"]:
                print(">>>>>>>>> checking rule id:", ipr_id)
                describe_ips_url = f"{HOST}/computers/{computer['ID']}/intrusionprevention/rules/{ipr_id}"
                ipr = get_response(url=describe_ips_url, headers=HEADERS)

                if ipr.get("CVE"):
                    for cve in ipr["CVE"]:
                        if cve in this_instance_cves:
                            print(
                                account_id,
                                instance_id,
                                computer["displayName"],
                                ipr["identifier"],
                                ipr["name"],
                                cve,
                                ipr["severity"],
                                ipr["CVSSScore"],
                            )
                            csv_rows.append(
                                [
                                    account_id,
                                    instance_id,
                                    computer["displayName"],
                                    ipr["identifier"],
                                    ipr["name"],
                                    cve,
                                    ipr["severity"],
                                    ipr["CVSSScore"],
                                ]
                            )
                            cves_protected_by_rules.append(cve)
            unprotected_cves = list(
                set(this_instance_cves) - set(cves_protected_by_rules)
            )
            for cve in unprotected_cves:
                csv_rows.append(
                    [
                        account_id,
                        instance_id,
                        computer["displayName"],
                        "None",
                        "None",
                        cve,
                        "None",
                        "None",
                    ]
                )
        else:
            for cve in this_instance_cves:
                csv_rows.append(
                    [
                        account_id,
                        instance_id,
                        computer["displayName"],
                        "None",
                        "None",
                        cve,
                        "None",
                        "None",
                    ]
                )

    csv_header_protected_instances = [
        "account_id",
        "instance_id",
        "computer",
        "ipr_identifier",
        "ipr_name",
        "cve",
        "severity",
        "cvss_score",
    ]
    file_data = [csv_header_protected_instances]
    file_data.extend(csv_rows)
    with open("/tmp/" + FILE_NAME, "w", newline="") as file:
        writer = csv.writer(file)
        writer.writerows(file_data)
        s3.upload_file("/tmp/" + FILE_NAME, BUCKET_NAME, FILE_NAME)
    # csv_file.seek(0)
    # The subject line for the email.
    message = f'Inspector findings and Cloud One ips rule report was generated, check "inspector_vulnerability_report.csv" file in "{BUCKET_NAME}" for more details'
    subject = f"Cloud One IPS rules and Inspector findings (CVEs) Report"

    print("sendig sns...")
    send_sns(topic_arn=TOPIC_ARN, subject=subject, message=message)

######################################## Uncomment the following if you running on your local machine
# lambda_handler(None, None)