from __future__ import print_function
import os
import json
import csv
import sys, warnings
import boto3
from botocore.exceptions import ClientError
from datetime import datetime
from pprint import pprint
from typing import List
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from tempfile import TemporaryFile
import deepsecurity as ds
from deepsecurity.models.intrusion_prevention_rule import IntrusionPreventionRule
from deepsecurity.models.intrusion_prevention_rules import IntrusionPreventionRules
from deepsecurity.rest import ApiException


API_VERSION = "v1"
AWS_REGION = os.environ.get("awsregion")
SENDER = os.environ.get("sender")
RECIPIENTS = os.environ.get("recipients")
HOST = (
    f"https://workload.{os.environ.get('cloudoneregion')}.cloudone.trendmicro.com/api"
)
C1_API_KEY = os.environ.get("c1_api")

######################################## Uncomment the following if you running on your local machine and comment the above 6 lines
# API_VERSION = "v1"
# AWS_REGION = "us-east-1"  ##You can input the aws region you want here
# SENDER = "sender@email.com"
# RECIPIENTS = "recipient@email.com"
# HOST = "https://workload.trend-us-1.cloudone.trendmicro.com/api"
# API_KEY = 'Your Cloud One API KEY'


inspector = boto3.client("inspector2", region_name=AWS_REGION)
sts = boto3.client("sts")
# Create a new SES resource and specify a region.
ses = boto3.client("ses", region_name=AWS_REGION)
secrets_manager = boto3.client(
    "secretsmanager"
)  # You may not need this if running locally so you can comment when runing locally


def get_account_id():
    return sts.get_caller_identity()["Account"]


def cves_from_instance(instance_id, inspector):
    cves = list()
    result = list()
    print("<<<<<<< checking instance id:", instance_id)
    resp = inspector.list_findings(
        filterCriteria={
            "findingStatus": [{"comparison": "EQUALS", "value": "ACTIVE"}],
            "resourceId": [{"comparison": "EQUALS", "value": instance_id}],
        }
    )
    result.extend(resp["findings"])
    next_token = resp.get("nextToken")
    while next_token:
        resp = inspector.list_findings(
            filterCriteria={
                "findingStatus": [{"comparison": "EQUALS", "value": "ACTIVE"}],
                "resourceId": [{"comparison": "EQUALS", "value": instance_id}],
            },
            nextToken=next_token,
        )
        result.extend(resp["findings"])
        next_token = resp.get("nextToken")
    for finding in result:
        cve = finding.get("packageVulnerabilityDetails", {}).get("vulnerabilityId")
        if cve:
            cves.append(cve)
        # print(cve)
    return cves


def all_instances_details_from_inspector(inspector):
    instances = list()
    result = list()
    findings = inspector.list_finding_aggregations(
        aggregationType="AWS_EC2_INSTANCE",
        # aggregationRequest='AWS_EC2_INSTANCE',
    )
    result.extend(findings["responses"])
    next_token = findings.get("nextToken")
    while next_token:
        findings = inspector.list_finding_aggregations(
            aggregationType="AWS_EC2_INSTANCE",
            # aggregationRequest='AWS_EC2_INSTANCE',
            nextToken=next_token,
        )
        result.extend(findings["responses"])
        next_token = findings.get("nextToken")
    for finding in result:
        instance_details = {
            "id": finding["ec2InstanceAggregation"]["instanceId"],
            "name": finding["ec2InstanceAggregation"]
            .get("instanceTags", {})
            .get("Name"),
        }
        instances.append(instance_details)
    print("Found total instances =", len(instances))
    return instances


def ds_config_and_version(cloud_one_api_key):
    # Setup
    if not sys.warnoptions:
        warnings.simplefilter("ignore")
    API_VERSION = "v1"
    conf = ds.Configuration()
    conf.host = HOST
    conf.api_key["Authorization"] = f"ApiKey {cloud_one_api_key}"
    return conf, API_VERSION


def send_email(sender, recipients, subject, html_body, attachment_details):
    print("sending email ...")
    # Create a new SES resource and specify a region.
    client = boto3.client("ses", region_name=AWS_REGION)
    msg = MIMEMultipart()
    text_part = MIMEText(html_body, _subtype="html")
    msg.attach(text_part)

    msg["To"] = recipients
    msg["From"] = sender
    msg["Subject"] = subject
    for item in attachment_details:
        filename = item["filename"]
        attachment = item["attachment"]
        part = MIMEApplication(attachment.read(), filename)
        part.add_header("Content-Disposition", "attachment", filename=filename)
        msg.attach(part)
    client.send_raw_email(RawMessage={"Data": msg.as_bytes()})


def lambda_handler(event, context):
    # get secret
    secrets = secrets_manager.get_secret_value(SecretId=C1_API_KEY)
    sm_data = json.loads(secrets["SecretString"])
    new_api_format = sm_data["ApiKey"]
    conf, api_version = ds_config_and_version(new_api_format)

    ######################################## Uncomment the following (the line below) if you running on your local machine and comment the above last 4 lines
    # conf, api_version = ds_config_and_version(API_KEY)
    csv_rows = list()
    inspector = boto3.client("inspector2")
    all_instance_details = all_instances_details_from_inspector(inspector)
    for instance_details in all_instance_details:
        instance_id = instance_details["id"]
        instance_name = instance_details["name"]
        print(instance_name, instance_id)
        cves = cves_from_instance(instance_id, inspector)
        print("inspector", cves)
        search_criteria = ds.SearchCriteria()
        search_criteria.field_name = "ec2VirtualMachineSummary/instanceID"
        search_criteria.string_test = "equal"
        search_criteria.string_value = instance_id
        # Create a search filter with maximum returned items
        search_filter = ds.SearchFilter()
        search_filter.search_criteria = [search_criteria]
        expand = ds.Expand(ds.Expand.intrusion_prevention)
        expand.add(ds.Expand.ec2_virtual_machine_summary)
        # Perform the search and do work on the results
        computers_api = ds.ComputersApi(ds.ApiClient(conf))
        rows = []
        computers = computers_api.search_computers(
            api_version,
            search_filter=search_filter,
            expand=expand.list(),
            overrides=False,
        )
        num_found = len(computers.computers)
        if num_found == 0:
            print(f"No computers found for instance id: {instance_id}")
        for computer in computers.computers:
            print(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>   id", computer.id)
            if computer.intrusion_prevention.rule_ids:
                for ipr_id in computer.intrusion_prevention.rule_ids:
                    print(">>>>>>>>> checking rule id:", ipr_id)
                    api_client = ds.ApiClient(configuration=conf)
                    api = ds.ComputerIntrusionPreventionRuleDetailsApi(api_client)
                    ipr = api.describe_intrusion_prevention_rule_on_computer(
                        computer_id=computer.id,
                        intrusion_prevention_rule_id=ipr_id,
                        api_version=api_version,
                    )
                    if ipr.cve:
                        for cve in ipr.cve:
                            if cve in cves:
                                print(
                                    instance_id,
                                    computer.display_name,
                                    ipr.identifier,
                                    ipr.name,
                                    cve,
                                    ipr.severity,
                                    ipr.cvss_score,
                                )
                                csv_rows.append(
                                    [
                                        instance_id,
                                        computer.display_name,
                                        ipr.identifier,
                                        ipr.name,
                                        cve,
                                        ipr.severity,
                                        ipr.cvss_score,
                                    ]
                                )
    csv_file = TemporaryFile(mode="w+", newline="")
    writer = csv.writer(csv_file)
    csv_header_protected_instances = [
        "instance_id",
        "computer",
        "ipr identifier",
        "ipr name",
        "cve",
        "severity",
        "cvss_score",
    ]
    writer.writerow(csv_header_protected_instances)
    for row in csv_rows:
        writer.writerow(row)
    csv_file.seek(0)
    # The subject line for the email.
    subject = f"Vulnerability Report (CVEs) from Intrusion Prevention - {get_account_id()}, {AWS_REGION}"
    protected_instances_html = '<table border="1">' + "\n"
    # write headers
    protected_instances_html += "</tr>" + "\n"
    for col in csv_header_protected_instances:
        protected_instances_html += f"<th>{col}</th>" + "\n"
    protected_instances_html += "</tr>" + "\n"
    # write rows
    for row in csv_rows:
        protected_instances_html += "<tr>" + "\n"
        for col in row:
            protected_instances_html += f"<td>{col}</td>" + "\n"
        protected_instances_html += "</tr>" + "\n"
    protected_instances_html += "</table>"
    csv_rows_unprotected_instances = list()
    all_instance_details = all_instances_details_from_inspector(inspector)
    for instance_details in all_instance_details:
        id = instance_details["id"]
        name = instance_details["name"]
        cves = cves_from_instance(id, inspector)
        if cves:
            for cve in cves:
                csv_rows_unprotected_instances.append([id, name, cve])
    tmp_csv_file_unprotected_instances = TemporaryFile(mode="w+", newline="")
    writer = csv.writer(tmp_csv_file_unprotected_instances)
    csv_header_unprotected_instances = ["instance_id", "name", "cve"]
    writer.writerow(csv_header_unprotected_instances)
    for row in csv_rows_unprotected_instances:
        writer.writerow(row)
    tmp_csv_file_unprotected_instances.seek(0)
    unprotected_instances_html = '<table border="1">' + "\n"
    # write headers
    unprotected_instances_html += "</tr>" + "\n"
    for col in csv_header_unprotected_instances:
        unprotected_instances_html += f"<th>{col}</th>" + "\n"
    unprotected_instances_html += "</tr>" + "\n"
    # write rows
    for row in csv_rows_unprotected_instances:
        unprotected_instances_html += "<tr>" + "\n"
        for col in row:
            unprotected_instances_html += f"<td>{col}</td>" + "\n"
        unprotected_instances_html += "</tr>" + "\n"
    unprotected_instances_html += "</table>"
    # The HTML body of the email.
    body_html = f"""<html>
    <head></head>
    <body>
        <h1>Protected Instances</h1>
        {protected_instances_html}
        <h1>Unprotected Instances</h1>
        {unprotected_instances_html}
    </body>
    </html>
    """
    send_email(
        SENDER,
        RECIPIENTS,
        subject,
        body_html,
        [
            {"filename": "protected_instances.csv", "attachment": csv_file},
            {
                "filename": "unprotected_instances.csv",
                "attachment": tmp_csv_file_unprotected_instances,
            },
        ],
    )


######################################## Uncomment the following if you running on your local machine
# lambda_handler(None, None)
