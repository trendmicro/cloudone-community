AWSTemplateFormatVersion: 2010-09-09
Description: Trend Cloud One Workload Security Integration.

Parameters:
  CloudOneAccountID:
    Description: Cloud One Account Id. You can learn more about it at https://cloudone.trendmicro.com/docs/identity-and-account-management/c1-api-key/
    Type: String
  CloudOneApiKey:
    Description: Cloud One API Key. You can learn more about it at https://cloudone.trendmicro.com/docs/identity-and-account-management/c1-api-key/
    Type: String
    NoEcho: true
  CloudOneRegion:
    Description: Cloud One Region. More info at https://cloudone.trendmicro.com/docs/identity-and-account-management/c1-regions/
    Type: String
    Default: us-1
    AllowedValues:
       - us-1
       - trend-us-1
       - au-1
       - ie-1
       - sg-1
       - in-1
       - jp-1
       - ca-1
       - de-1
  CloudOneFeatures:
    Description: Comma separated list of Cloud One Features to deploy. Defaults to deploy Sentry.
      More info at https://cloudone.trendmicro.com/docs/cloud-account-management/api-reference/tag/AWS#operation/describeAWSStackTemplate
    Type: String
    Default: cloud-sentry
  RegionsToDeploy:
    Description: Comma separated list of AWS Regions where the Features will be deployed to. If empty, all accessible regions will be used.
      More info at https://cloudone.trendmicro.com/docs/cloud-account-management/api-reference/tag/AWS#operation/describeAWSStackTemplate
    Type: String
    Default: ""


Resources:
  CloudOneIntegrationStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudOneRegion: !Ref CloudOneRegion
        CloudOneAccountID: !Ref CloudOneAccountID
        CloudOneOIDCProviderURL: !Sub 'cloudaccounts.${CloudOneRegion}.cloudone.trendmicro.com'
      TemplateURL: !GetAtt GetCloudOneIntegrationTemplate.templateURL

  AddAWSAccountToCloudOneFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Architectures:
        - arm64
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt AddAWSAccountToCloudOneFunctionRole.Arn
      Environment:
        Variables:
          CloudOneRoleArn: !GetAtt CloudOneIntegrationStack.Outputs.CloudOneRoleArn
          CloudOneRegion: !Ref CloudOneRegion
          CloudOneApiKey: !Ref CloudOneApiKey
      Code:
        ZipFile:
          |-
            import json
            import os
            import urllib3
            import cfnresponse

            def lambda_handler(event, context):
                status = cfnresponse.SUCCESS
                response_data = {}
                physicalResourceId = None
                try:

                    cloudOneRoleArn = os.environ['CloudOneRoleArn']
                    cloudOneRegion = os.environ['CloudOneRegion']
                    cloudOneApiKey = os.environ['CloudOneApiKey']

                    headers = {
                      'api-version': 'v1',
                      'Authorization': 'ApiKey '+cloudOneApiKey+'',
                      'Content-Type': 'application/json'
                    }

                    http = urllib3.PoolManager()
                    
                    
                    if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                      
                      url = 'https://cloudaccounts.'+cloudOneRegion+'.cloudone.trendmicro.com/api/cloudaccounts/aws'

                      payload = json.dumps({
                        'roleARN': cloudOneRoleArn
                      })
                      encoded_payload = payload.encode("utf-8")
                      print(url)
                      response = http.request("POST", url=url, headers=headers, body=encoded_payload)
                      print(response)
                      response_json_data = json.loads(response.data.decode("utf-8"))
                      print(response_json_data)
                      physicalResourceId = response_json_data["id"] 
                      response_data = {"ID": response_json_data["id"]}

                    else: # if event["RequestType"] == "Delete":
                      id = event["PhysicalResourceId"]

                      url = 'https://cloudaccounts.'+cloudOneRegion+'.cloudone.trendmicro.com/api/cloudaccounts/aws/' + id

                      print(url)
                      response = http.request("DELETE", url=url, headers=headers)
                      print(response)
                      
                except Exception as e:
                  print(e)
                  status = cfnresponse.FAILED
                
                cfnresponse.send(event, context, status, response_data, physicalResourceId)

  AddAWSAccountToCloudOne:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AddAWSAccountToCloudOneFunction.Arn

  AddAWSAccountToCloudOneFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  
  GetCloudOneIntegrationTemplateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Architectures:
        - arm64
      Timeout: 60
      Handler: index.lambda_handler
      Role: !GetAtt GetCloudOneIntegrationTemplateFunctionRole.Arn
      Environment:
        Variables:
          CloudOneRegion: !Ref CloudOneRegion
          CloudOneApiKey: !Ref CloudOneApiKey
          AWSRegion: !Ref AWS::Region
          CloudOneFeatures: !Ref CloudOneFeatures
          RegionsToDeploy: !Ref RegionsToDeploy
      Code:
        ZipFile:
          |-
            import json
            import os
            import urllib3
            import boto3
            import cfnresponse

            ec2 = boto3.client('ec2')

            def lambda_handler(event, context):
                status = cfnresponse.SUCCESS
                response_data = {}
                physicalResourceId = None
                try:

                    cloudOneRegion = os.environ['CloudOneRegion']
                    cloudOneApiKey = os.environ['CloudOneApiKey']
                    aws_region =  os.environ['AWSRegion'] or os.environ['AWS_REGION'] 
                    features = os.environ['CloudOneFeatures']
                    regions_to_deploy = os.environ['RegionsToDeploy']   

                    headers = {
                      'api-version': 'v1',
                      'Authorization': 'ApiKey '+cloudOneApiKey+'',
                      'Content-Type': 'application/json'
                    }

                    http = urllib3.PoolManager()
                    
                    if event["RequestType"] == "Create" or event["RequestType"] == "Update":

                      if not regions_to_deploy:
                        response = [region['RegionName'] for region in ec2.describe_regions()['Regions']]
                        print('Regions:', response)
                        regions_to_deploy = ",".join(response)
                      
                      url = 'https://cloudaccounts.'+cloudOneRegion+'.cloudone.trendmicro.com/api/cloudaccounts/aws/templates'

                      query_parameters = {
                        "features": features,
                        "awsRegion": aws_region,
                        "featureAWSRegions": regions_to_deploy
                      }

                      print(url)
                      response = http.request("GET", url=url, headers=headers, fields=query_parameters)
                      print(response)
                      response_json_data = json.loads(response.data.decode("utf-8"))
                      print(response_json_data)
                      physicalResourceId = response_json_data["templateURL"] 
                      response_data = {
                        "templateURL": response_json_data["templateURL"],
                        "parameters": response_json_data["parameters"]
                      }

                    else: # if event["RequestType"] == "Delete":
                      id = event["PhysicalResourceId"]

                      url = 'https://cloudaccounts.'+cloudOneRegion+'.cloudone.trendmicro.com/api/cloudaccounts/aws/' + id

                      print(url)
                      response = http.request("DELETE", url=url, headers=headers)
                      print(response)
                      
                except Exception as e:
                  print(e)
                  status = cfnresponse.FAILED
                
                cfnresponse.send(event, context, status, response_data, physicalResourceId)

  GetCloudOneIntegrationTemplate:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GetCloudOneIntegrationTemplateFunction.Arn

  GetCloudOneIntegrationTemplateFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: GetAvailableRegions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                Resource: '*'
        
  
